========================= CONTAINER =================================

1 - docker run <imagem> = baixa imagem e roda container
2 - docker run -it <imagem> = baixa imagem e roda container no modo interativo (terminal)
2 - docker run -d <imagem> = baixa imagem e roda container em plano de fundo (background)
3 - docker run -d -p 80:80 <imagem> = baixa imagem, roda container em plano de fundo (background), na porta docker 80, porta externa 80
4 - docker ps = exibe containers parados
5 - docker ps -a = exibe containers parados e em execução
6 - docker container ls = exibe containers parados
7 - docker container ls -a = exibe containers parados e em execução
8 - docker stop <nome_imagem | id_imagem> = para execução do container
9 - docker start <nome_imagem | id_imagem> = reiniciar container
10 - docker run --name <escolha-um-nome> <imagem>
11 - docker logs <id-container> = exibe logs do container
12 - docker rm <id-container> = remove um container
13 - docker rm <id-container> -f = remove um container mesmo em execução (remoção forçada)
14 - docker run --rm <container> = roda container e o remove logo após
15 - docker cp container_diferente2:/app/app.js ./copia/ = copia arquivo de container_diferente2 para outro local
16 - docker top <container> = informações sobre execução de container
17 - docker inspect <container> = exibe informações do container
18 docker stats = exibe informações de todos os containers

=-------------- IMAGEM ------------------=
1 - FROM <imagem> = imagem base
2 - WORKDIR <dir> = diretório de execução
3 - COPY <package> <dir> = copia arquivos para o diretório indicado
4 - RUN <comando> = rodar comando
5 - COPY . . = copiar tudo
6 - EXPOSE <porta> = expõe porta indicada
7 - CMD ["node", "app.js"] = comando para inicializar aplicação
8 - docker build <diretorio-da-imagem> . = constrói/gera imagem à partir de um 'Dockerfile'
9 - docker image ls = listar todas as imagens
10 - docker images = exibe todas as imagens
11 - docker run -d -p 5000:3000 --name meu_node3 257049964fa3 = rodar imagem na porta 5000
12 - docker pull <imagem> = baixar imagem do hub.docker
13 - docker <comando> --help = ajuda com as opções do comando
14 - docker tag <id-imagem> <novo-nome-da-imagem> = nomear imagem
15 - docker tag <id-imagem> <novo-nome-da-imagem>:<nome-da-tag> = nomear imagem e adicionar tag
16 - docker build -t <nomear-imagem> . = construir imagem com nome
17 - docker rmi <imagem> = remove imagem
18 - docker push <imagem> = enviar imagem para docker hub
19 - 

=========================== SYSTEM ==================================

1 - docker system prune = remove imagens, conatiners, networks
2 - docker login = entrar na conta docker hub
3 - docker logout = sair da conta docker hub

=========================== VOLUMES ==================================
1 - Forma prática de gravar dados
2 - Tipos de volumes: 
    2.1 - anônimos (anonymous) = criados pela flag -v, nome aleatório
    2.2 - nomeados (named) = volumes com nomes
    2.3 - bind mounts - gravar dados na máquina, sem gerenciamento do docker.
3 - docker volume ls = exibe todos os volumes do ambiente
4 - docker run -d -p 80:80 --name phpmessages_container --rm -v /data phpmessages = criar e iniciar container nomeado com volume anônimo na porta 80
5 - docker run -d -p 80:80 --name phpmessages_container -v phpvolume:/var/www/html/messages --rm phpmessages = rodar container nomeado na pasta do container, remover após parada
6 - docker volume create <nome-do-volume> = criar volume manualmente
7 - docker volume ls = listar todos os volumes
8 - 